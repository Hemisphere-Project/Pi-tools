
#!/bin/bash

USAGE="nmcon [wifi/ethernet] [name/ssid] {-p [wifi_password]} {-i [priority]} {-s [static_ip/mask]} {-g [static_gateway]}"

TYPE=$1; shift  	# wifi / ethernet
NAME=$1; shift		# profile name = SSID 

PRIORITY=0			# priority 
WIFI_PASS=""			# wifi password

IP="auto"			# auto (DHCP) or static IP address with mask i.e.: 2.0.10.37/16
GATEWAY=""			# if static IP provide router IP address i.e.: 2.0.0.1

while getopts i:p:s:g: option; do
	case "${option}"
	in
		i) PRIORITY=${OPTARG};;
		p) WIFI_PASS=${OPTARG};;
		s) IP=${OPTARG};;
		g) GATEWAY=${OPTARG};;
	esac
done

## NAME
if [ "$NAME" = "" ]; then
  echo "Error: name should not be empty"
  echo "Usage: $USAGE"
  exit 1
fi

## CMD
CMD="nmcli con add con-name $NAME type $TYPE connection.autoconnect-priority $PRIORITY connection.autoconnect-retries 0"

## WIFI
if [ "$TYPE" = "wifi" ]; then
  
  CMD="$CMD ifname wlan0 ssid $NAME " 
  
  if [ "$WIFI_PASS" = "" ]; then
  	CMD="$CMD wifi-sec.key-mgmt none"
  else
  	CMD="$CMD wifi-sec.key-mgmt wpa-psk wifi-sec.psk $WIFI_PASS"
  fi

## ETHERNET
elif [ "$TYPE" = "ethernet" ]; then

  CMD="$CMD ifname eth0"

else
  echo "Error: unsupported connection type. type should be wifi or ethernet"
  echo "Usage: $USAGE"
  exit 1
fi

## DHCP
if [ "$IP" = "auto" ]; then
  CMD="$CMD ipv4.method auto"

## STATIC
elif [[ ! -z "${GATEWAY// }" ]]; then
  CMD="$CMD ipv4.method manual ipv4.address $IP ipv4.gateway $GATEWAY"

else
  echo "Error: you provided a static IP but not GATEWAY"
  echo "Usage: $USAGE"
  exit 1
fi

echo $CMD
$CMD


#nmcli con add con-name $name type $type autoconnect-priority $priority autoconnect-retries 0 // ifname wlan0 ssid $name // wifi-sec.key-mgmt none  ipv4.method manual ipv4.address 192.168.43.12/24 ipv4.gateway 192.168.43.1 


